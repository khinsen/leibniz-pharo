Class {
	#name : #LbContextExamples,
	#superclass : #Object,
	#category : 'Leibniz-6-Contexts'
}

{ #category : #example }
LbContextExamples >> booleanContext [
	<gtExample>
	^ LbContext
		name: 'boolean'
		signature: (LbSignatureExamples new booleanSignature)
		rewriteSystem: (LbRewriteSystemExamples new booleanRewriteSystem)
]

{ #category : #example }
LbContextExamples >> derivativeContext [
	<gtExample>
	^ (LbContextBuilder name: 'derivatives-โโโ')
		include: (LbContextExamples new realFunctionContext) mode: #extend;
		parseAndAddOp: '๐(โโโ) : โโโ';
		parseAndAddRule: '๐(f + g) โ ๐(f) + ๐(g)';
		parseAndAddRule: '๐(f - g) โ ๐(f) - ๐(g)';
		parseAndAddRule: '๐(s ร f) โ s ร ๐(f)';
		parseAndAddRule: '๐(f ร g) โ (๐(f) ร g) + (f ร ๐(g))';
		parseAndAddRule: '๐(f โ g) โ (๐(f) โ g) ร ๐(g)';
		context
]

{ #category : #accessing }
LbContextExamples >> fooBarBazContext [
	<gtExample>
	^ (LbContextBuilder name: 'foo-bar-baz')
		include: self fooBarContext mode: #extend;
		parseAndAddSort: 'baz';
		parseAndAddOp: 'baz : baz';
		parseAndAddOp: 'foo(baz) : foo';
		parseAndAddOp: 'baz(foo) : baz';
		parseAndAddRule: 'foo(baz) โ foo';
		parseAndAddAxiom: 'baz(foo) = baz';
		context
]

{ #category : #example }
LbContextExamples >> fooBarContext [
	<gtExample>
	^ (LbContextBuilder name: 'foo-bar')
		parseAndAddSort: 'foo';
		parseAndAddSort: 'bar';
		parseAndAddOp: 'foo : foo';
		parseAndAddOp: 'bar : bar';
		parseAndAddOp: 'foo(bar) : foo';
		parseAndAddOp: 'bar(foo) : bar';
		parseAndAddRule: 'foo(bar) โ foo';
		parseAndAddAxiom: 'bar(foo) = bar';
		context
]

{ #category : #example }
LbContextExamples >> massContext [
	<gtExample>
	^ (LbContextBuilder name: 'mass')
		include: (LbBuiltinContexts realNumberContext) mode: #use;
		parseAndAddSort: 'mass';
		parseAndAddOp: 'mass + mass : mass';
		parseAndAddOp: 'โ.p ร mass : mass';
		parseAndAddOp: 'mass รท โ.p : mass';
		parseAndAddOp: 'mass รท mass : โ.p';
		parseAndAddVar: 'M:mass';
		parseAndAddVar: 'M1:mass';
		parseAndAddVar: 'M2:mass';
		parseAndAddVar: 'F:โ.p';
		parseAndAddVar: 'F1:โ.p';
		parseAndAddVar: 'F2:โ.p';
		parseAndAddRule: '(F1 ร M) + (F2 ร M) โ (F1 + F2) ร M';
		parseAndAddRule: 'F1 ร (F2 ร M) โ (F1 ร F2) ร M';
		parseAndAddRule: 'M รท F โ (1 รท F) ร M';
		parseAndAddRule: 'M1 รท (F ร M2) โ (M1 รท F) รท M2';
		parseAndAddRule: '(F ร M1) รท M2 โ F ร (M1 รท M2)';
		parseAndAddRule: 'M รท M โ 1';
		context
]

{ #category : #example }
LbContextExamples >> massUnitContext [
	<gtExample>
	^ (LbContextBuilder name: 'mass-units')
		include: (LbContextExamples new massContext) mode: #extend;
		include: (LbContextExamples new booleanContext) mode: #use;
		parseAndAddSort: 'mass-unit โ mass';
		parseAndAddOp: 'kg : mass-unit';
		parseAndAddOp: 'g : mass-unit';
		parseAndAddOp: 'mg : mass-unit';
		parseAndAddOp: 'mass in mass-unit : mass';
		parseAndAddVar: 'MU:mass-unit';
		parseAndAddVar: 'MU1:mass-unit';
		parseAndAddVar: 'MU2:mass-unit';
		parseAndAddRule: 'g รท kg โ 1/1000';
		parseAndAddRule: 'mg รท kg โ 1/1000000';
		parseAndAddRule: 'M in MU โ (M รท MU) ร MU';
		parseAndAddRule: 'MU1 รท MU2 โ (MU1 รท kg) รท (MU2 รท kg) | ยฌ(MU2 == kg)';
		context
]

{ #category : #example }
LbContextExamples >> realFunctionContext [
	<gtExample>
	^ (LbContextBuilder name: 'โโโ')
		include: (LbBuiltinContexts realNumberContext) mode: #use;
		parseAndAddSort: 'โโโ';
		parseAndAddOp: 'โโโ[โ] : โ';
		parseAndAddOp: 'f:โโโ โ g:โโโ : โโโ';
		parseAndAddOp: 's:โ ร g:โโโ : โโโ';
		parseAndAddOp: 'f:โโโ + g:โโโ : โโโ';
		parseAndAddOp: 'f:โโโ - g:โโโ : โโโ';
		parseAndAddOp: 'f:โโโ ร g:โโโ : โโโ';
		parseAndAddRule: 'โ x:โ (f + g)[x] โ f[x] + g[x]';
		parseAndAddRule: 'โ x:โ (f - g)[x] โ f[x] - g[x]';
		parseAndAddRule: 'โ x:โ (f ร g)[x] โ f[x] ร g[x]';
		parseAndAddRule: 'โ x:โ (s ร g)[x] โ s ร g[x]';
		parseAndAddRule: 'โ x:โ (f โ g)[x] โ f[g[x]]';
		context
]
